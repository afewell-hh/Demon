name: review-threads-guard (PR)  # DO NOT RENAME

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: read

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  guard:
    runs-on: ubuntu-latest
    steps:
      - name: Skip on manual dispatch (not a PR context)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "Manual dispatch: skipping guard (no PR context)."
          exit 0
      - name: Checkout
        uses: actions/checkout@v4

      - name: Decide enforcement & docs-only
        id: decide
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const github = require('@actions/github');
            const pr = github.context.payload.pull_request;
            const owner = github.context.repo.owner;
            const repo  = github.context.repo.repo;

            const labels = (pr?.labels || []).map(l => l.name.toLowerCase());
            const enforce = labels.includes('enforce-review-replies');

            // List changed files to detect docs-only changes
            const files = await github.rest.pulls.listFiles({ owner, repo, pull_number: pr.number, per_page: 300 });
            const DOCS_RE = /^(docs\/|README\.md$|\.github\/|CONTRIBUTING\.md$|GOVERNANCE\.md$)/i;
            const codeFiles = files.data.filter(f => !DOCS_RE.test(f.filename));
            const docsonly = codeFiles.length === 0;

            core.setOutput('enforce', enforce ? 'true' : 'false');
            core.setOutput('docsonly', docsonly ? 'true' : 'false');

      - name: Short-circuit (not enforcing)
        if: steps.decide.outputs.enforce != 'true'
        run: |
          echo "Guard not enforced (label missing). Passing by design."
          exit 0

      - name: Short-circuit (docs-only)
        if: steps.decide.outputs.docsonly == 'true'
        run: |
          echo "Docs-only change; skipping guard."
          exit 0

      - name: Check unresolved threads (no author reply)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const github = require('@actions/github');
            const owner = github.context.repo.owner;
            const repo  = github.context.repo.repo;
            const number = github.context.payload.pull_request.number;

            const prResp = await github.rest.pulls.get({ owner, repo, pull_number: number });
            const prAuthor = prResp.data.user?.login || '';

            const query = `
              query Threads($owner:String!,$repo:String!,$number:Int!,$after:String) {
                repository(owner:$owner, name:$repo) {
                  pullRequest(number:$number) {
                    reviewThreads(first:100, after:$after) {
                      nodes {
                        isResolved
                        comments(first:100) { nodes { author { login } url createdAt } }
                      }
                      pageInfo { hasNextPage endCursor }
                    }
                  }
                }
              }`;

            let after = null;
            let offending = 0;
            do {
              const r = await github.graphql(query, { owner, repo, number, after });
              const rt = r.repository.pullRequest.reviewThreads;
              for (const th of rt.nodes) {
                if (th.isResolved) continue;
                const replied = (th.comments.nodes || []).some(c => c.author?.login === prAuthor);
                if (!replied) offending++;
              }
              after = rt.pageInfo.hasNextPage ? rt.pageInfo.endCursor : null;
            } while (after);

            if (offending > 0) {
              core.setFailed(`${offending} unresolved review thread(s) without an author reply.`);
            } else {
              core.info('Guard passed (all unresolved threads have author replies, or none remain).');
            }

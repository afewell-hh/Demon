name: CI

on:
  push:
    branches: [ main, trunk, master ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch: {}

jobs:
  # DO NOT RENAME: used in branch protection required checks
  review-lock-guard:
    name: review-lock-guard
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.pull_request;

            async function fetchState() {
              const res = await github.rest.pulls.get({ owner, repo, pull_number: pr.number });
              return {
                body: res.data.body || "",
                headSha: res.data.head.sha
              };
            }

            async function wait(ms) { return new Promise(r => setTimeout(r, ms)); }

            // Retry loop to tolerate API eventual consistency on PR body updates
            let lock = null;
            let headSha = null;
            const maxAttempts = 10;
            for (let i = 1; i <= maxAttempts; i++) {
              const { body, headSha: currentHead } = await fetchState();
              headSha = currentHead;
              const m = body.match(/Review-lock:\s*([0-9a-f]{40})/i);
              lock = m ? m[1] : null;
              if (lock && lock.toLowerCase() === headSha.toLowerCase()) {
                core.info(`Review-lock OK for ${headSha.slice(0,12)} on attempt ${i}`);
                break;
              }
              if (i < maxAttempts) {
                core.info(`Review-lock not aligned yet (attempt ${i}/${maxAttempts}): lock=${(lock||'none').slice(0,12)} headSha=${headSha.slice(0,12)}; retrying…`);
                await wait(3000);
              }
            }

            if (!lock) {
              core.setFailed("Review-lock not found. Add a line: 'Review-lock: <HEAD_SHA>'");
              return;
            }
            if (lock.toLowerCase() !== headSha.toLowerCase()) {
              core.setFailed(`Review-lock mismatch after retries: lock=${lock.slice(0,12)} headSha=${headSha.slice(0,12)}`);
            }
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (pinned toolchain)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0
          components: clippy, rustfmt

      - name: Cache cargo registry + target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Build (debug)
        run: cargo build --workspace

      - name: Unit tests
        run: cargo test --workspace --all-features -- --nocapture

      - name: "Guard: no snake_case in approvals template usage"
        run: |
          set -e
          ! grep -R --line-number -E '\\.(run_id|ritual_id|state_from|state_to)\\b' operate-ui/templates || \
            (echo "Snake_case fields found in templates; use camelCase VM fields."; exit 1)

      - name: Validate approval contract fixtures
        run: cargo test -p engine --test approval_contracts_spec -- --nocapture

      # M0 smoke: run echo ritual; NATS not required yet, but we bring it up to match dev profile
      - name: Start NATS (JetStream)
        run: |
          docker run -d --rm --name nats -p 4222:4222 -p 8222:8222 nats:2.10 -js
          # Wait briefly for readiness
          for i in {1..20}; do
            if docker logs nats 2>&1 | grep -q "Server is ready"; then exit 0; fi
            sleep 0.5
          done
          echo "NATS did not report ready in time"; docker logs nats; exit 1

      - name: Engine approvals integration (NATS)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          cargo test -p engine --test approvals_integration -- --ignored --nocapture

      - name: Engine approvals TTL integration (NATS)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
          APPROVAL_TTL_SECONDS: 2
        run: |
          cargo test -p engine --test approvals_ttl_integration -- --ignored --nocapture

      - name: Operate UI approvals routes (NATS)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          cargo test -p operate-ui --test approvals_routes_spec -- --ignored --nocapture

      - name: Engine per-cap quotas integration (NATS)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          cargo test -p engine --test per_cap_quota_integration -- --ignored --nocapture


      - name: Smoke run (demonctl)
        run: |
          set -euo pipefail
          OUT="$(cargo run -q -p demonctl -- run examples/rituals/echo.yaml)"
          echo "$OUT"
          echo "$OUT" | grep -q '"event": "ritual.completed:v1"'
          echo "$OUT" | grep -q 'Hello from Demon!' || true  # printed to stdout by capsule; may be interleaved

      - name: Playwright smoke (Operate UI banner)
        working-directory: operate-ui/playwright
        env:
          BASE_URL: http://127.0.0.1:3000
          APPROVER_EMAIL: tester@example.com
        run: |
          # Start server on 3000 without stream bootstrap and allow the test approver email
          export DEMON_SKIP_STREAM_BOOTSTRAP=1
          export APPROVER_ALLOWLIST="${APPROVER_EMAIL:-tester@example.com}"
          (cd ../.. && APPROVER_ALLOWLIST="$APPROVER_ALLOWLIST" RUST_LOG=info cargo run -p operate-ui --quiet &) 
          # Wait for port 3000 to open
          for i in {1..60}; do nc -z 127.0.0.1 3000 && break; sleep 0.5; done
          # Stronger readiness: require HTTP 200 and JSON body from /api/runs
          for i in {1..60}; do
            code=$(curl -sS -o /tmp/runs.json -w "%{http_code}" http://127.0.0.1:3000/api/runs || true)
            if [[ "$code" == "200" ]] && jq -e . /tmp/runs.json >/dev/null 2>&1; then
              echo "✓ API ready"; break
            fi
            sleep 0.5
          done
          jq . /tmp/runs.json || true
          npm install
          npx playwright install --with-deps
          npm test

      - name: Teardown NATS
        if: always()
        run: docker rm -f nats || true

  preview-smoke:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (pinned toolchain)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0

      - name: Cache cargo registry + target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Start NATS (JetStream)
        run: |
          docker run -d --rm --name nats -p 4222:4222 -p 8222:8222 nats:2.10 -js
          for i in {1..40}; do
            if docker logs nats 2>&1 | grep -q "Server is ready"; then exit 0; fi
            sleep 0.5
          done
          echo "NATS did not report ready in time"; docker logs nats; exit 1

      - name: Build workspace
        run: cargo build --workspace

      - name: Start Operate UI (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
          APPROVER_ALLOWLIST: ops@example.com
        run: |
          nohup bash -c 'APPROVER_ALLOWLIST=ops@example.com RITUAL_STREAM_NAME=RITUAL_EVENTS cargo run -q -p operate-ui' >/tmp/ui.log 2>&1 &
          for i in {1..60}; do
            curl -sf http://127.0.0.1:3000/api/runs >/dev/null 2>&1 && break || true
            sleep 0.5
          done

      - name: Start TTL worker (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          nohup bash -c 'TTL_WORKER_ENABLED=1 RITUAL_STREAM_NAME=RITUAL_EVENTS cargo run -q -p engine --bin demon-ttl-worker' >/tmp/worker.log 2>&1 &
          sleep 1

      - name: Seed preview (idempotent)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          chmod +x examples/seed/seed_preview.sh
          ./examples/seed/seed_preview.sh | tee /tmp/seed.log

      - name: Preview assertions
        run: |
          set -euo pipefail
          # Runs list
          curl -s http://127.0.0.1:3000/api/runs | jq 'length >= 1' | grep -q true
          # Granted present
          curl -s http://127.0.0.1:3000/api/runs/run-preview-b | jq '.events | map(.event) | index("approval.granted:v1") != null' | grep -q true
          # TTL expired present once
          curl -s http://127.0.0.1:3000/api/runs/run-preview-c | jq '.events | map(select(.event=="approval.denied:v1" and .reason=="expired")) | length == 1' | grep -q true
          # HTML renders
          curl -s http://127.0.0.1:3000/runs | grep -qi '<!doctype html>'
          curl -s http://127.0.0.1:3000/runs/run-preview-b | grep -qi '<!doctype html>'

      - name: Teardown NATS
        if: always()
        run: docker rm -f nats || true

  cargo-audit:
    name: Cargo audit (advisories)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-audit (+stable)
        run: |
          set -euo pipefail
          cargo +stable install cargo-audit \
            || (echo "cargo-audit install failed; retrying in 10s" && sleep 10 && cargo +stable install cargo-audit)
      - name: Audit (+stable)
        run: |
          set -euo pipefail
          cargo +stable audit --deny warnings \
            || (echo "cargo-audit run failed; retrying in 10s" && sleep 10 && cargo +stable audit --deny warnings)

  cargo-deny:
    name: Cargo deny (licenses/bans)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install cargo-deny
        run: |
          set -euo pipefail
          cargo install cargo-deny --locked --force
      - name: Check licenses & bans
        run: cargo deny check --all-features
        continue-on-error: true

  bootstrapper-smoke:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (pinned toolchain)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0

      - name: Cache cargo registry + target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Start NATS (JetStream)
        run: |
          docker run -d --rm --name nats -p 4222:4222 -p 8222:8222 nats:2.10 -js
          for i in {1..40}; do
            if docker logs nats 2>&1 | grep -q "Server is ready"; then exit 0; fi
            sleep 0.5
          done
          echo "NATS did not report ready in time"; docker logs nats; exit 1

      - name: Build workspace
        run: cargo build --workspace

      - name: Start Operate UI (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS_BS
          APPROVER_ALLOWLIST: ops@example.com
        run: |
          nohup bash -c 'APPROVER_ALLOWLIST=ops@example.com RITUAL_STREAM_NAME=RITUAL_EVENTS_BS cargo run -q -p operate-ui' >/tmp/ui.log 2>&1 &
          for i in {1..60}; do
            curl -sf http://127.0.0.1:3000/api/runs >/dev/null 2>&1 && break || true
            sleep 0.5
          done

      - name: Start TTL worker (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS_BS
        run: |
          nohup bash -c 'TTL_WORKER_ENABLED=1 RITUAL_STREAM_NAME=RITUAL_EVENTS_BS cargo run -q -p engine --bin demon-ttl-worker' >/tmp/worker.log 2>&1 &
          sleep 1

      - name: Bootstrap ensure+seed+verify (idempotent)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS_BS
          RITUAL_SUBJECTS: demon.ritual.v1.>
        run: |
          cargo run -q -p bootstrapper-demonctl -- --ensure-stream --seed --verify
          cargo run -q -p bootstrapper-demonctl -- --ensure-stream --seed --verify

      - name: Teardown NATS
        if: always()
        run: docker rm -f nats || true

  demonctl-bootstrap-smoke:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (pinned toolchain)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0

      - name: Cache cargo registry + target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Start NATS (JetStream)
        run: |
          docker run -d --rm --name nats -p 4222:4222 -p 8222:8222 nats:2.10 -js
          for i in {1..40}; do
            if docker logs nats 2>&1 | grep -q "Server is ready"; then exit 0; fi
            sleep 0.5
          done
          echo "NATS did not report ready in time"; docker logs nats; exit 1

      - name: Build workspace
        run: cargo build --workspace

      - name: Start Operate UI (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS_DEMONCTL
          APPROVER_ALLOWLIST: ops@example.com
        run: |
          nohup bash -c 'APPROVER_ALLOWLIST=ops@example.com RITUAL_STREAM_NAME=RITUAL_EVENTS_DEMONCTL cargo run -q -p operate-ui' >/tmp/ui.log 2>&1 &
          for i in {1..60}; do
            curl -sf http://127.0.0.1:3000/api/runs >/dev/null 2>&1 && break || true
            sleep 0.5
          done

      - name: Start TTL worker (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS_DEMONCTL
        run: |
          nohup bash -c 'TTL_WORKER_ENABLED=1 RITUAL_STREAM_NAME=RITUAL_EVENTS_DEMONCTL cargo run -q -p engine --bin demon-ttl-worker' >/tmp/worker.log 2>&1 &
          sleep 1

      - name: demonctl bootstrap ensure+seed+verify (idempotent)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS_DEMONCTL
          RITUAL_SUBJECTS: demon.ritual.v1.>
        run: |
          cargo run -q -p demonctl -- bootstrap --ensure-stream --seed --verify
          cargo run -q -p demonctl -- bootstrap --ensure-stream --seed --verify

      - name: demonctl bootstrap individual flags
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS_DEMONCTL
          RITUAL_SUBJECTS: demon.ritual.v1.>
        run: |
          cargo run -q -p demonctl -- bootstrap --ensure-stream
          cargo run -q -p demonctl -- bootstrap --seed --ritual-id test-ritual
          cargo run -q -p demonctl -- bootstrap --verify

      - name: demonctl bootstrap with overrides
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS_DEMONCTL
          RITUAL_SUBJECTS: demon.ritual.v1.>
        run: |
          RITUAL_SUBJECTS="test.bootstrap.v1.>" cargo run -q -p demonctl -- bootstrap --ensure-stream --stream-name TEST_STREAM_OVERRIDE --nats-url nats://127.0.0.1:4222

      - name: Teardown NATS
        if: always()
        run: docker rm -f nats || true

  bootstrapper-bundles:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (pinned toolchain)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0

      - name: Cache cargo registry + target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Clean up any existing containers
        run: |
          echo "=== Initial container cleanup ==="
          docker rm -f nats1 nats2 || true
          docker ps -a | grep nats || echo "No NATS containers found"

      - name: Start NATS (4222) and NATS (4223)
        run: |
          echo "=== Starting NATS containers ==="
          docker run -d --rm --name nats1 -p 4222:4222 -p 8222:8222 nats:2.10 -js
          docker run -d --rm --name nats2 -p 4223:4222 -p 8223:8222 nats:2.10 -js

          echo "=== Waiting for NATS readiness ==="
          for i in {1..40}; do
            echo "Attempt $i/40: Checking NATS readiness..."
            if docker logs nats1 2>&1 | grep -q "Server is ready" && docker logs nats2 2>&1 | grep -q "Server is ready"; then
              echo "✓ Both NATS servers are ready"
              # Additional check using NATS health endpoint
              if curl -sf http://127.0.0.1:8222/healthz >/dev/null 2>&1 && curl -sf http://127.0.0.1:8223/healthz >/dev/null 2>&1; then
                echo "✓ NATS health endpoints responding"
                exit 0
              fi
            fi
            sleep 0.5
          done
          echo "❌ NATS readiness check failed"
          echo "=== NATS1 logs ==="
          docker logs nats1 || true
          echo "=== NATS2 logs ==="
          docker logs nats2 || true
          exit 1

      - name: Build workspace
        run: cargo build --workspace

      - name: Start Operate UI + TTL worker
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS_BUNDLES
          APPROVER_ALLOWLIST: ops@example.com
        run: |
          echo "=== Starting Operate UI ==="
          nohup bash -c 'APPROVER_ALLOWLIST=ops@example.com RITUAL_STREAM_NAME=RITUAL_EVENTS_BUNDLES cargo run -q -p operate-ui' >/tmp/ui.log 2>&1 &

          echo "=== Waiting for Operate UI readiness ==="
          for i in {1..60}; do
            echo "Attempt $i/60: Checking operate-ui readiness..."
            code=$(curl -sS -o /tmp/runs.json -w "%{http_code}" http://127.0.0.1:3000/api/runs 2>/dev/null || echo "000")
            if [[ "$code" == "200" ]] && jq -e . /tmp/runs.json >/dev/null 2>&1; then
              echo "✓ Operate UI ready (HTTP $code)"
              break
            elif [[ $i -eq 60 ]]; then
              echo "❌ Operate UI failed to start after 30 seconds"
              echo "=== Operate UI logs ==="
              cat /tmp/ui.log || true
              exit 1
            fi
            sleep 0.5
          done

          echo "=== Starting TTL worker ==="
          nohup bash -c 'TTL_WORKER_ENABLED=1 RITUAL_STREAM_NAME=RITUAL_EVENTS_BUNDLES cargo run -q -p engine --bin demon-ttl-worker' >/tmp/worker.log 2>&1 &
          sleep 1

      - name: Run local-dev bundle (twice) with idempotency asserts
        run: |
          echo "=== First bootstrap run ==="
          cargo run -q -p demonctl -- bootstrap --profile local-dev --ensure-stream --seed --verify 2>&1 | tee /tmp/local1.log

          echo "=== Inspecting NATS streams before cleanup ==="
          docker exec nats1 nats stream ls || echo "No streams or command failed"

          echo "=== Recreating NATS container for clean state ==="
          # Stop and remove to ensure no JetStream state persists
          docker stop nats1 || true
          docker rm nats1 || true

          # Recreate with clean state
          docker run -d --rm --name nats1 -p 4222:4222 -p 8222:8222 nats:2.10 -js

          echo "=== Waiting for fresh NATS readiness ==="
          for i in {1..40}; do
            echo "Attempt $i/40: Checking fresh NATS readiness..."
            if docker logs nats1 2>&1 | grep -q "Server is ready"; then
              echo "✓ Fresh NATS ready"
              # Verify health endpoint and give extra time for JetStream
              if curl -sf http://127.0.0.1:8222/healthz >/dev/null 2>&1; then
                echo "✓ NATS health endpoint responding"
                sleep 2  # Extra pause for JetStream initialization
                break
              fi
            fi
            if [[ $i -eq 40 ]]; then
              echo "❌ Fresh NATS failed to become ready"
              docker logs nats1 || true
              exit 1
            fi
            sleep 0.5
          done

          echo "=== Waiting for Operate UI to reconnect ==="
          for i in {1..30}; do
            echo "Attempt $i/30: Checking operate-ui after NATS restart..."
            code=$(curl -sS -o /tmp/runs_check.json -w "%{http_code}" http://127.0.0.1:3000/api/runs 2>/dev/null || echo "000")
            if [[ "$code" == "200" ]] && jq -e . /tmp/runs_check.json >/dev/null 2>&1; then
              echo "✓ Operate UI reconnected (HTTP $code)"
              break
            elif [[ $i -eq 30 ]]; then
              echo "❌ Operate UI failed to reconnect to fresh NATS"
              echo "=== Operate UI logs after reconnection attempt ==="
              tail -20 /tmp/ui.log || true
              exit 1
            fi
            sleep 0.5
          done

          echo "=== Second bootstrap run ==="
          cargo run -q -p demonctl -- bootstrap --profile local-dev --ensure-stream --seed --verify 2>&1 | tee /tmp/local2.log

          echo "=== Verifying second run success ==="
          if ! grep -q 'seed: ok' /tmp/local2.log; then
            echo "❌ Second run did not show 'seed: ok'"
            echo "=== Local2 log content ==="
            cat /tmp/local2.log
            exit 1
          fi
          if ! grep -q 'verify: ok' /tmp/local2.log; then
            echo "❌ Second run did not show 'verify: ok'"
            echo "=== Local2 log content ==="
            cat /tmp/local2.log
            exit 1
          fi
          echo "✓ Second bootstrap run completed successfully"

      - name: Run remote-nats bundle (twice) with idempotency asserts
        env:
          NATS_URL: nats://127.0.0.1:4223
        run: |
          echo "=== First remote-nats bootstrap run ==="
          cargo run -q -p demonctl -- bootstrap --profile remote-nats --ensure-stream --seed --verify 2>&1 | tee /tmp/remote1.log

          echo "=== Inspecting NATS2 streams before cleanup ==="
          docker exec nats2 nats stream ls || echo "No streams or command failed"

          echo "=== Recreating NATS2 container for clean state ==="
          # Stop and remove to ensure no JetStream state persists
          docker stop nats2 || true
          docker rm nats2 || true

          # Recreate with clean state
          docker run -d --rm --name nats2 -p 4223:4222 -p 8223:8222 nats:2.10 -js

          echo "=== Waiting for fresh NATS2 readiness ==="
          for i in {1..40}; do
            echo "Attempt $i/40: Checking fresh NATS2 readiness..."
            if docker logs nats2 2>&1 | grep -q "Server is ready"; then
              echo "✓ Fresh NATS2 ready"
              # Verify health endpoint and give extra time for JetStream
              if curl -sf http://127.0.0.1:8223/healthz >/dev/null 2>&1; then
                echo "✓ NATS2 health endpoint responding"
                sleep 2  # Extra pause for JetStream initialization
                break
              fi
            fi
            if [[ $i -eq 40 ]]; then
              echo "❌ Fresh NATS2 failed to become ready"
              docker logs nats2 || true
              exit 1
            fi
            sleep 0.5
          done

          echo "=== Second remote-nats bootstrap run ==="
          cargo run -q -p demonctl -- bootstrap --profile remote-nats --ensure-stream --seed --verify 2>&1 | tee /tmp/remote2.log

          echo "=== Verifying remote second run success ==="
          if ! grep -q 'seed: ok' /tmp/remote2.log; then
            echo "❌ Remote second run did not show 'seed: ok'"
            echo "=== Remote2 log content ==="
            cat /tmp/remote2.log
            exit 1
          fi
          if ! grep -q 'verify: ok' /tmp/remote2.log; then
            echo "❌ Remote second run did not show 'verify: ok'"
            echo "=== Remote2 log content ==="
            cat /tmp/remote2.log
            exit 1
          fi
          echo "✓ Second remote-nats bootstrap run completed successfully"

      - name: Teardown NATS
        if: always()
        run: |
          docker rm -f nats1 || true
          docker rm -f nats2 || true

  # DO NOT RENAME: used in branch protection required checks
  bootstrapper-bundles-verify:
    name: Bootstrapper bundles — verify (offline, signature ok)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (pinned toolchain)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0

      - name: Cache cargo registry + target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build (locked)
        run: cargo build --locked --workspace

      - name: Verify library bundle (offline)
        run: |
          target/debug/bootstrapper-demonctl --verify-only --bundle lib://local/preview-local-dev@0.0.1 | tee verify.log
          jq -e 'select(.phase=="verify" and .signature=="ok")' verify.log >/dev/null

  bootstrapper-bundles-verify-negative:
    name: Bootstrapper bundles — negative verify (tamper ⇒ failed)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build demonctl (locked)
        run: cargo build --locked -p bootstrapper-demonctl

      - name: Tamper bundle and run verify-only (expect failure)
        shell: bash
        run: |
          set -euo pipefail

          # Tamper canonical bytes: bump duplicateWindowSeconds deterministically.
          # If the key exists, increment; otherwise append it.
          if grep -q '^duplicateWindowSeconds:' examples/bundles/local-dev.yaml; then
            awk 'BEGIN{FS=OFS=": "}
                 /^duplicateWindowSeconds:/{print $1": "$2+1; next}
                 {print}' examples/bundles/local-dev.yaml > local-dev.tmp
            mv local-dev.tmp examples/bundles/local-dev.yaml
          else
            printf '\nduplicateWindowSeconds: 121\n' >> examples/bundles/local-dev.yaml
          fi

          # Run offline verify; capture exit code
          set +e
          target/debug/bootstrapper-demonctl --verify-only --bundle lib://local/preview-local-dev@0.0.1 | tee tamper.log
          status=$?
          set -e

          # Assert we saw a failed signature line…
          jq -e 'select(.phase=="verify" and .signature=="failed")' tamper.log >/dev/null

          # …and the process exited non-zero.
          if [ $status -eq 0 ]; then
            echo "::error::verify-only unexpectedly succeeded on tampered bundle"
            exit 1
          fi
          
          echo "✅ Negative test passed: tampered bundle correctly failed verification"
          exit 0

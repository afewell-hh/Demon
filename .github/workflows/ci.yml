name: CI

on:
  push:
    branches: [ main, trunk, master ]
  pull_request:
    branches: [ "**" ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (pinned toolchain)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0
          components: clippy, rustfmt

      - name: Cache cargo registry + target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Build (debug)
        run: cargo build --workspace

      - name: Unit tests
        run: cargo test --workspace --all-features -- --nocapture

      - name: Guard: no snake_case in approvals template usage
        run: |
          set -e
          ! grep -R --line-number -E '\\.(run_id|ritual_id|state_from|state_to)\\b' operate-ui/templates || \
            (echo "Snake_case fields found in templates; use camelCase VM fields."; exit 1)

      - name: Validate approval contract fixtures
        run: cargo test -p engine --test approval_contracts_spec -- --nocapture

      # M0 smoke: run echo ritual; NATS not required yet, but we bring it up to match dev profile
      - name: Start NATS (JetStream)
        run: |
          docker run -d --rm --name nats -p 4222:4222 -p 8222:8222 nats:2.10 -js
          # Wait briefly for readiness
          for i in {1..20}; do
            if docker logs nats 2>&1 | grep -q "Server is ready"; then exit 0; fi
            sleep 0.5
          done
          echo "NATS did not report ready in time"; docker logs nats; exit 1

      - name: Engine approvals integration (NATS)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          cargo test -p engine --test approvals_integration -- --ignored --nocapture

      - name: Engine approvals TTL integration (NATS)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
          APPROVAL_TTL_SECONDS: 2
        run: |
          cargo test -p engine --test approvals_ttl_integration -- --ignored --nocapture

      - name: Operate UI approvals routes (NATS)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          cargo test -p operate-ui --test approvals_routes_spec -- --ignored --nocapture

      - name: Engine per-cap quotas integration (NATS)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          cargo test -p engine --test per_cap_quota_integration -- --ignored --nocapture

      - name: Smoke run (demonctl)
        run: |
          set -euo pipefail
          OUT="$(cargo run -q -p demonctl -- run examples/rituals/echo.yaml)"
          echo "$OUT"
          echo "$OUT" | grep -q '"event": "ritual.completed:v1"'
          echo "$OUT" | grep -q 'Hello from Demon!' || true  # printed to stdout by capsule; may be interleaved

      - name: Teardown NATS
        if: always()
        run: docker rm -f nats || true

  preview-smoke:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (pinned toolchain)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0

      - name: Cache cargo registry + target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Start NATS (JetStream)
        run: |
          docker run -d --rm --name nats -p 4222:4222 -p 8222:8222 nats:2.10 -js
          for i in {1..40}; do
            if docker logs nats 2>&1 | grep -q "Server is ready"; then exit 0; fi
            sleep 0.5
          done
          echo "NATS did not report ready in time"; docker logs nats; exit 1

      - name: Build workspace
        run: cargo build --workspace

      - name: Start Operate UI (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
          APPROVER_ALLOWLIST: ops@example.com
        run: |
          nohup bash -c 'APPROVER_ALLOWLIST=ops@example.com RITUAL_STREAM_NAME=RITUAL_EVENTS cargo run -q -p operate-ui' >/tmp/ui.log 2>&1 &
          for i in {1..60}; do
            curl -sf http://127.0.0.1:3000/api/runs >/dev/null 2>&1 && break || true
            sleep 0.5
          done

      - name: Start TTL worker (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          nohup bash -c 'TTL_WORKER_ENABLED=1 RITUAL_STREAM_NAME=RITUAL_EVENTS cargo run -q -p engine --bin demon-ttl-worker' >/tmp/worker.log 2>&1 &
          sleep 1

      - name: Seed preview (idempotent)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          chmod +x examples/seed/seed_preview.sh
          ./examples/seed/seed_preview.sh | tee /tmp/seed.log

      - name: Preview assertions
        run: |
          set -euo pipefail
          # Runs list
          curl -s http://127.0.0.1:3000/api/runs | jq 'length >= 1' | grep -q true
          # Granted present
          curl -s http://127.0.0.1:3000/api/runs/run-preview-b | jq '.events | map(.event) | index("approval.granted:v1") != null' | grep -q true
          # TTL expired present once
          curl -s http://127.0.0.1:3000/api/runs/run-preview-c | jq '.events | map(select(.event=="approval.denied:v1" and .reason=="expired")) | length == 1' | grep -q true
          # HTML renders
          curl -s http://127.0.0.1:3000/runs | grep -qi '<!doctype html>'
          curl -s http://127.0.0.1:3000/runs/run-preview-b | grep -qi '<!doctype html>'

      - name: Teardown NATS
        if: always()
        run: docker rm -f nats || true

  bootstrapper-smoke:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (pinned toolchain)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0

      - name: Cache cargo registry + target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
          cache-on-failure: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Start NATS (JetStream)
        run: |
          docker run -d --rm --name nats -p 4222:4222 -p 8222:8222 nats:2.10 -js
          for i in {1..40}; do
            if docker logs nats 2>&1 | grep -q "Server is ready"; then exit 0; fi
            sleep 0.5
          done
          echo "NATS did not report ready in time"; docker logs nats; exit 1

      - name: Build workspace
        run: cargo build --workspace

      - name: Start Operate UI (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
          APPROVER_ALLOWLIST: ops@example.com
        run: |
          nohup bash -c 'APPROVER_ALLOWLIST=ops@example.com RITUAL_STREAM_NAME=RITUAL_EVENTS cargo run -q -p operate-ui' >/tmp/ui.log 2>&1 &
          for i in {1..60}; do
            curl -sf http://127.0.0.1:3000/api/runs >/dev/null 2>&1 && break || true
            sleep 0.5
          done

      - name: Start TTL worker (background)
        env:
          RITUAL_STREAM_NAME: RITUAL_EVENTS
        run: |
          nohup bash -c 'TTL_WORKER_ENABLED=1 RITUAL_STREAM_NAME=RITUAL_EVENTS cargo run -q -p engine --bin demon-ttl-worker' >/tmp/worker.log 2>&1 &
          sleep 1

      - name: Bootstrap ensure+seed+verify (idempotent)
        run: |
          cargo run -q -p bootstrapper-demonctl -- --ensure-stream --seed --verify
          cargo run -q -p bootstrapper-demonctl -- --ensure-stream --seed --verify

      - name: Teardown NATS
        if: always()
        run: docker rm -f nats || true

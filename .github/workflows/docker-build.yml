name: Build and Push Docker Images

on:
  push:
    branches: [main]
  pull_request:
    paths:
      - '**/Dockerfile'
      - '**/src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rust-toolchain.toml'
      - 'operate-ui/**'
      - 'runtime/**'
      - 'engine/**'
      - 'crates/**'
      - 'wards/**'
      - 'capsules/**'
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/afewell-hh/demon

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [operate-ui, runtime, engine]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.component }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image metadata
        run: |
          echo "Image: ${{ env.IMAGE_PREFIX }}-${{ matrix.component }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
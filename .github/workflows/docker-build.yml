name: Build and Push Docker Images

on:
  push:
    branches: [main]
  pull_request:
    paths:
      - '**/Dockerfile'
      - '**/src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rust-toolchain.toml'
      - 'operate-ui/**'
      - 'runtime/**'
      - 'engine/**'
      - 'crates/**'
      - 'wards/**'
      - 'capsules/**'
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/afewell-hh/demon

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build ${{ matrix.component }}
    strategy:
      fail-fast: false
      matrix:
        component: [operate-ui, runtime, engine]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      # Buildx cache uploads can fail due to Azure storage contention on PRs;
      # ignore-error=true ensures builds succeed even when cache service is unavailable
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.component }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.component }}
          cache-to: type=gha,mode=max,scope=${{ matrix.component }},ignore-error=true
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}

      - name: Output image metadata
        if: always()
        run: |
          echo "Component: ${{ matrix.component }}"
          echo "Image: ${{ env.IMAGE_PREFIX }}-${{ matrix.component }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "Build Cache Key: ${{ matrix.component }}"
          if [ "${{ steps.build.outcome }}" = "failure" ]; then
            echo "::error title=Docker Build Failed::Failed to build ${{ matrix.component }} image"
          fi

      - name: Write image digest artifact
        id: write-digest
        if: ${{ steps.build.outputs.digest != '' }}
        run: |
          set -euo pipefail
          mkdir -p image-digests
          digest="${{ steps.build.outputs.digest }}"
          digest="${digest#sha256:}"
          if [ -z "$digest" ]; then
            echo "Digest missing for ${{ matrix.component }}" >&2
            exit 1
          fi

          repository="${{ env.IMAGE_PREFIX }}-${{ matrix.component }}"
          cat <<JSON > image-digests/${{ matrix.component }}.json
          {
            "component": "${{ matrix.component }}",
            "repository": "${repository}",
            "digest": "sha256:${digest}",
            "image": "${repository}@sha256:${digest}",
            "gitShaTag": "${repository}:sha-${{ github.sha }}"
          }
          JSON
          cat image-digests/${{ matrix.component }}.json

      - name: Upload image digest artifact
        if: steps.write-digest.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-metadata-${{ matrix.component }}
          path: image-digests/${{ matrix.component }}.json
          retention-days: 30

  publish_digests:
    name: Publish image digest manifest
    runs-on: ubuntu-latest
    needs: build
    outputs:
      digest-json: ${{ steps.collect.outputs.digest-json }}
    steps:
      - name: Download component digests
        uses: actions/download-artifact@v4
        with:
          pattern: docker-image-metadata-*
          path: image-digests
          merge-multiple: true

      - name: Merge digest manifest
        id: collect
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=(image-digests/*.json)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No image digest artifacts available; writing empty manifest" >&2
            printf '{}\n' > docker-image-digests.json
          else
            jq -s 'map({ (.component): {repository: .repository, digest: .digest, image: .image, gitShaTag: .gitShaTag}}) | add' "${files[@]}" > docker-image-digests.json
          fi
          cat docker-image-digests.json
          echo "digest-json=$(jq -c . docker-image-digests.json)" >> "$GITHUB_OUTPUT"

      - name: Upload digest manifest artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-digests
          path: docker-image-digests.json
          retention-days: 30

      - name: Summarize digest manifest
        run: |
          echo "### Docker image digests" >> "$GITHUB_STEP_SUMMARY"
          jq -r 'to_entries | ("| Component | Digest | Image |"), ("| --- | --- | --- |"), (.[] | "| " + .key + " | `" + .value.digest + "` | `" + .value.image + "` |")' docker-image-digests.json >> "$GITHUB_STEP_SUMMARY"

name: protection-audit

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
  pull_request: {}

permissions:
  contents: read
  pull-requests: read
  administration: read   # needed only if PROTECTION_TOKEN is present

env:
  GH_TOKEN: ${{ secrets.PROTECTION_TOKEN }}  # use admin token when available

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Gate admin calls (skip if no token)
        run: |
          if [[ -z "${GH_TOKEN:-}" ]]; then
            echo "No PROTECTION_TOKEN; running in info mode and skipping admin endpoints."
            echo "audit_skip_admin=true" >> "$GITHUB_OUTPUT"
          else
            echo "audit_skip_admin=false" >> "$GITHUB_OUTPUT"
          fi
        id: gate
      - name: Get default branch
        id: repo
        run: |
          gh api repos/${{ github.repository }} --jq .default_branch > default_branch.txt
          echo "branch=$(cat default_branch.txt)" >> "$GITHUB_OUTPUT"
      - name: Assert replies guard required when flagged (admin)
        if: steps.gate.outputs.audit_skip_admin == 'false'
        shell: bash
        run: |
          set -euo pipefail
          BR="${{ steps.repo.outputs.branch }}"
          if [[ -f .github/flags/guard-required ]]; then
            echo "Flag present — asserting replies-guard is a required status check"
            ctx=$(gh api repos/:owner/:repo/branches/$BR/protection -q '.required_status_checks.contexts')
            echo "$ctx" | jq -e 'index("review-threads-guard (PR) / guard") != null' >/dev/null || {
              echo "::error::Required checks missing: review-threads-guard (PR) / guard"; exit 1; }
          else
            echo "Flag absent — skipping replies-guard assertion (burn-in phase)"
          fi
      - name: Info mode (no admin token)
        if: steps.gate.outputs.audit_skip_admin == 'true'
        run: echo "Audit in info mode: no admin token; skipping protection assertions."


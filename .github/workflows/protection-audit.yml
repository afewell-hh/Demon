name: protection-audit

on:
  schedule:
    - cron: "17 3 * * *"  # daily at 03:17 UTC
  workflow_dispatch: {}

jobs:
  audit-skip-note:
    if: ${{ secrets.PROTECTION_TOKEN == '' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "Skipping protection audit: PROTECTION_TOKEN not set."

  audit:
    # Skip in forks or repos without the secret to avoid noisy failures
    if: ${{ secrets.PROTECTION_TOKEN != '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    concurrency:
      group: protection-audit
      cancel-in-progress: false
    # Uses a PAT because GITHUB_TOKEN often lacks repo-admin read for branch protection in orgs.
    # PAT scope: Repository permissions -> Administration: Read-only (repo-scoped, fine-grained).
    env:
      GH_TOKEN: ${{ secrets.PROTECTION_TOKEN }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
      - name: Get default branch
        id: repo
        shell: bash
        run: |
          gh api repos/${{ github.repository }} --jq .default_branch > default_branch.txt
          echo "branch=$(cat default_branch.txt)" >> "$GITHUB_OUTPUT"
      - name: Verify required protection settings
        shell: bash
        run: |
          set -euo pipefail
          BR="${{ steps.repo.outputs.branch }}"
          gh api -H "Accept: application/vnd.github+json" repos/:owner/:repo/branches/$BR/protection -q '.required_status_checks.contexts | sort' | jq .

          # Assert required checks present
          REQ1='Bootstrapper bundles — verify (offline, signature ok)'
          REQ2='Bootstrapper bundles — negative verify (tamper ⇒ failed)'
          REQ3='review-lock-guard'
          MAP=$(gh api -H "Accept: application/vnd.github+json" repos/:owner/:repo/branches/$BR/protection -q '.required_status_checks.contexts')
          echo "$MAP" | jq -e "index(\"$REQ1\")" >/dev/null
          echo "$MAP" | jq -e "index(\"$REQ2\")" >/dev/null
          echo "$MAP" | jq -e "index(\"$REQ3\")" >/dev/null

          # Assert CODEOWNERS gate
          gh api -H "Accept: application/vnd.github+json" repos/:owner/:repo/branches/$BR/protection -q '.required_pull_request_reviews.require_code_owner_reviews' | grep -qx true

      - name: Create/Update issue on failure (DO NOT RENAME)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = "⚠️ Protection audit failed";
            const body  = `Protection audit failed on ${new Date().toISOString()}.
            
            Please verify required checks, Code Owners, and branch settings (strict/linear history).
            
            Run logs are attached to the failed workflow.`;
            // Try to find existing open issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner, repo: context.repo.repo, state: "open", labels: "ops-audit"
            });
            if (issues.length > 0) {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issues[0].number, body });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner, repo: context.repo.repo,
                title, body, labels: ["ops-audit","security","ci"]
              });
            }

      - name: Slack notify on failure (optional)
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -s -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"⚠️ Protection audit failed in ${GITHUB_REPOSITORY} @ ${GITHUB_RUN_ID}\"}" \
            "$SLACK_WEBHOOK_URL"
